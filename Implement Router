from collections import deque, defaultdict
import bisect

class Router:
    def __init__(self, memoryLimit: int):  # Corrected constructor name
        self.memoryLimit = memoryLimit
        self.queue = deque()  # Stores packets in FIFO order
        self.packetSet = set()  # For duplicate detection
        self.destToTimestamps = defaultdict(list)  # Destination -> sorted list of timestamps

    def addPacket(self, source: int, destination: int, timestamp: int) -> bool:
        packet = (source, destination, timestamp)

        # Check for duplicates
        if packet in self.packetSet:
            return False

        # Evict oldest if memory is full
        if len(self.queue) == self.memoryLimit:
            old_src, old_dst, old_time = self.queue.popleft()
            self.packetSet.remove((old_src, old_dst, old_time))
            # Remove old_time from that destinationâ€™s list
            lst = self.destToTimestamps[old_dst]
            idx = bisect.bisect_left(lst, old_time)
            if idx < len(lst) and lst[idx] == old_time:
                lst.pop(idx)

        # Add new packet
        self.queue.append(packet)
        self.packetSet.add(packet)
        self.destToTimestamps[destination].append(timestamp)  # Timestamps come in increasing order
        return True

    def forwardPacket(self):
        if not self.queue:
            return []

        src, dst, time = self.queue.popleft()
        self.packetSet.remove((src, dst, time))

        # Remove timestamp from destination list
        lst = self.destToTimestamps[dst]
        idx = bisect.bisect_left(lst, time)
        if idx < len(lst) and lst[idx] == time:
            lst.pop(idx)

        return [src, dst, time]

    def getCount(self, destination: int, startTime: int, endTime: int) -> int:
        lst = self.destToTimestamps[destination]
        if not lst:
            return 0
        # Find range using binary search
        left = bisect.bisect_left(lst, startTime)
        right = bisect.bisect_right(lst, endTime)
        return right - left
