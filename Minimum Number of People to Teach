from typing import List

class Solution:
    def minimumTeachings(self, n: int, languages: List[List[int]], friendships: List[List[int]]) -> int:
        # Convert each user's languages to a set (0-based user indices)
        langs = [set(l) for l in languages]

        # Find friendships where the two users currently can't communicate
        problematic_users = set()
        for u, v in friendships:
            u -= 1  # convert to 0-based
            v -= 1
            if not (langs[u] & langs[v]):  # no common language
                problematic_users.add(u)
                problematic_users.add(v)

        if not problematic_users:
            return 0

        # For each language 1..n, count how many problematic users need to be taught it
        min_teach = float('inf')
        for lang in range(1, n + 1):
            teach_count = 0
            for u in problematic_users:
                if lang not in langs[u]:
                    teach_count += 1
            if teach_count < min_teach:
                min_teach = teach_count

        return min_teach


# --- Example runs ---
if __name__ == "_main_":
    sol = Solution()
    print(sol.minimumTeachings(
        2,
        [[1], [2], [1, 2]],
        [[1, 2], [1, 3], [2, 3]]
    ))  # expected 1

    print(sol.minimumTeachings(
        3,
        [[2], [1, 3], [1, 2], [3]],
        [[1, 4], [1, 2], [3, 4], [2, 3]]
    ))  # expected 2
